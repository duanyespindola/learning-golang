package main

import (
	"fmt"
	"strings"
	"testing"
)

func TestArabicToRoman(t *testing.T) {
	tests := []struct {
		arabic int
		roman  string
	}{
		{1, "I"},
		{2, "II"},
		{3, "III"},
		{4, "IV"},
		{5, "V"},
		{6, "VI"},
		{7, "VII"},
		{8, "VIII"},
		{9, "IX"},
		{10, "X"},
		{14, "XIV"},
		{18, "XVIII"},
		{20, "XX"},
		{39, "XXXIX"},
		{40, "XL"},
		{50, "L"},
		{90, "XC"},
		{100, "C"},
		{400, "CD"},
		{500, "D"},
		{900, "CM"},
		{1000, "M"},
	}

	for _, test := range tests {
		t.Run(fmt.Sprintf("Number %d", test.arabic), func(t *testing.T) {
			got := ArabicToRoman(test.arabic)
			if got != test.roman {
				t.Errorf("got %q, want %q", got, test.roman)
			}
		})
	}
}

type RomanNumeral struct {
	Value  int
	Symbol string
}

var allRomanNumerals = []RomanNumeral{
	{1000, "M"},
	{900, "CM"},
	{500, "D"},
	{400, "CD"},
	{100, "C"},
	{90, "XC"},
	{50, "L"},
	{40, "XL"},
	{10, "X"},
	{9, "IX"},
	{5, "V"},
	{4, "IV"},
	{1, "I"},
}

func ArabicToRoman(arabic int) string {
	if arabic < 1 {
		return ""
	}
	var result strings.Builder

	for _, num := range allRomanNumerals {
		for arabic >= num.Value {
			result.WriteString(num.Symbol)
			arabic -= num.Value
		}
	}

	return result.String()
}
